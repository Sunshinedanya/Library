// <auto-generated />
using System;
using BibliotekaAksenov.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BibliotekaAksenov.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20240927085223_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BibliotekaAksenov.Model.Books", b =>
                {
                    b.Property<int>("id_Book")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Book"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre_id")
                        .HasColumnType("int");

                    b.Property<int>("Genreid_Genre")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("id_Book");

                    b.HasIndex("Genreid_Genre");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Genres", b =>
                {
                    b.Property<int>("id_Genre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Genre"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_Genre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Readers", b =>
                {
                    b.Property<int>("id_Reader")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Reader"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_Reader");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Rentals", b =>
                {
                    b.Property<int>("id_Rental")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_Rental"));

                    b.Property<int>("Book_id")
                        .HasColumnType("int");

                    b.Property<int>("Bookid_Book")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<int>("Reader_id")
                        .HasColumnType("int");

                    b.Property<int>("Readerid_Reader")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("id_Rental");

                    b.HasIndex("Bookid_Book");

                    b.HasIndex("Readerid_Reader");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Books", b =>
                {
                    b.HasOne("BibliotekaAksenov.Model.Genres", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("Genreid_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Rentals", b =>
                {
                    b.HasOne("BibliotekaAksenov.Model.Books", "Book")
                        .WithMany("Rentals")
                        .HasForeignKey("Bookid_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotekaAksenov.Model.Readers", "Reader")
                        .WithMany("Rentals")
                        .HasForeignKey("Readerid_Reader")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Books", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Genres", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BibliotekaAksenov.Model.Readers", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
